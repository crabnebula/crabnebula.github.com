<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[迷途]]></title>
  <link href="http://crabnebula.github.io/atom.xml" rel="self"/>
  <link href="http://crabnebula.github.io/"/>
  <updated>2013-07-30T20:19:06+08:00</updated>
  <id>http://crabnebula.github.io/</id>
  <author>
    <name><![CDATA[crab nebula]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[a simple hello world using autotools]]></title>
    <link href="http://crabnebula.github.io/blog/2013/07/29/a-simple-hello-world-using-autotools/"/>
    <updated>2013-07-29T21:21:00+08:00</updated>
    <id>http://crabnebula.github.io/blog/2013/07/29/a-simple-hello-world-using-autotools</id>
    <content type="html"><![CDATA[<p>很早就被开源吸引，现在还喜欢看着开源代码编译时在屏幕上高速的滚动。
GNU Autotools自动化构建工具集断断续续学习了几次，最近一次才找到一
些感觉，觉得算是入了门。就从hello，world自动生成Makefile开始说起,
该hello  项目参考AutoMake官方手册。</p>

<ol>
<li><p>hello项目文件组成</p>

<pre><code> hello.c 源文件
 configure.ac Autoconf 配置文件
 Makefile.am Automake 配置文件
 autogen.sh 生成configure配置脚本的执行脚本
</code></pre></li>
<li><p>hello项目文件内容</p></li>
</ol>


<p>hello.c</p>

<pre><code>    #include &lt;stdio.h&gt;  
    #include &lt;config.h&gt;

    int main(int argc, char *argv[])
    {
        puts("hello, autotools");
        puts("this is " PACKAGE_STRING ".");
        return 0;
    }
</code></pre>

<p>Makefile.am</p>

<pre><code>noinst_PROGRAMS=hello
hello_SOURCES=hello.c
</code></pre>

<p>configure.ac</p>

<pre><code>AC_PREREQ([2.69])
AC_INIT([hello], [2.0], [email])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])
AC_CONFIG_SRCDIR([hello.c])

dnl check for programs
AC_PROG_CC

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([
    Makefile
])
AC_OUTPUT
</code></pre>

<p>autogen.sh</p>

<pre><code>#!/bin/bash
test -n "$srcdir" || $srcdir=`dirname "$0"`
test -n "$srcdir" || $srcdir=.
(
    cd "$srcdir" &amp;&amp;
    autoreconf --force -v --install
) || exit
test -n "$NOCONFIGURE" || "$srcdir/configure" "$@"
</code></pre>

<ol>
<li>Autoconf配置文件configure.ac解析</li>
</ol>


<p>AC_PREREQ([]) 设置autoconf最低版本需求<br/>
AC_INIT([package name], [package version], [bug report])<br/>
AC_INIT_AUTOMAKE([-Wall -Werror foreign])<br/>
初始化Automake, -Wall -Werror与编译器编译选项相同，但与编译器无关，它们是Automake选项。</p>

<ol>
<li>Automake配置文件Makefile.am解析</li>
</ol>

]]></content>
  </entry>
  
</feed>
