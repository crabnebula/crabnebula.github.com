<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[迷 途]]></title>
  <link href="http://crabnebula.github.io/atom.xml" rel="self"/>
  <link href="http://crabnebula.github.io/"/>
  <updated>2013-07-30T22:23:41+08:00</updated>
  <id>http://crabnebula.github.io/</id>
  <author>
    <name><![CDATA[crab nebula]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hello world using autotools]]></title>
    <link href="http://crabnebula.github.io/blog/2013/07/29/hello-world-using-autotools/"/>
    <updated>2013-07-29T21:21:00+08:00</updated>
    <id>http://crabnebula.github.io/blog/2013/07/29/hello-world-using-autotools</id>
    <content type="html"><![CDATA[<p>GNU Autotools断断续续学习了几次，最近一次才找到一 些感觉，觉得算是入了门。
就从hello world自动生成Makefile开始说起, 参考AutoMake官方手册。</p>

<h3>hello项目文件</h3>

<p>hello.c  源文件</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;config.h&gt;

int main(int argc, char *argv[])
{
    puts("hello, autotools");
    puts("this is " PACKAGE_STRING ".");
    return 0;
}
</code></pre>

<p>Makefile.am Automake 配置指令文件</p>

<pre><code>noinst_PROGRAMS=hello
hello_SOURCES=hello.c
</code></pre>

<p>configure.ac Autoconf 配置指令文件</p>

<pre><code>AC_PREREQ([2.69])
AC_INIT([hello], [2.0], [email])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])
AC_CONFIG_SRCDIR([hello.c])

dnl check for programs
AC_PROG_CC

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([
    Makefile
])
AC_OUTPUT
</code></pre>

<p>autogen.sh configure和Makefile自动生成脚本</p>

<pre><code>#!/bin/bash
test -n "$srcdir" || $srcdir=`dirname "$0"`
test -n "$srcdir" || $srcdir=.
(
    cd "$srcdir" &amp;&amp;
    autoreconf --force -v --install
) || exit
test -n "$NOCONFIGURE" || "$srcdir/configure" "$@"
</code></pre>

<h3>configure.ac解析</h3>

<p>configure.ac使用M4宏指令，被Autoconf和Automake读取，Autoconf读取以AC_开始的宏
Automake读取以AM_开头的宏<br/>
AC_PREREQ 设置Autoconf所需最小版本<br/>
AC_INIT 设置软件包名字，版本和bug报告地址, 在config.h生成宏定义中<br/>
AM_INIT_AUTOMAKE 初始化Automake选项，-Wall -Werror与编译器编译选项相同，但与编译器无关。它们告诉
Automake在执行时打开警告并将警告当作错误处理<br/>
AC_CONFIG_SRCDIR 检查源文件是否存在<br/>
AC_PROG_CC 检查编译器，设置CC变量<br/>
AC_CONFIG_HEADERS 生成配置头文件<br/>
AC_CONFIG_FILES 生成的Makefile列表，添加子目录时，要添加相应目标Makefile文件<br/>
AC_OUTPUT 执行文件生成操作</p>

<h3>Automake配置文件Makefile.am解析</h3>

<p>noinst_PROGRAMS 定义不必安装的目标程序列表<br/>
bin_PROGRAMS 定义安装的bin目录下的目标程序列表<br/>
hello_SOURCES 定义生成hello目标程序所需的源文件</p>
]]></content>
  </entry>
  
</feed>
